{"version":3,"sources":["components/about/about.js","components/analog_display/analog_display.js","components/time_display/time_display.js","components/digital_display/digital_display.js","components/laps/laps.js","components/stopwatch/stopwatch.js","theme.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["About","Card","CardHeader","title","subheader","CardContent","Typography","variant","gutterBottom","CardActions","Button","fullWidth","endIcon","GitHub","href","TimeDisplay","props","rotate_seconds","transform","time","rotate_minutes","className","style","in_milliseconds","duration","date","Date","String","getUTCHours","padStart","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","hours","minutes","seconds","milliseconds","DigitalDisplay","classes","makeStyles","theme","root","backgroundColor","palette","background","lightGrey","list","header","Grey","useStyles","align","Laps","React","memo","width","overflow","maxHeight","padding","LapsExist","lap_times","length","NoLaps","ListItem","ref","useRef","useEffect","current","scrollIntoView","behavior","map","item","index","List","Stopwatch","state","init","timer","running","Grid","container","sm","md","this","start_pause_button","lap_button","reset_button","clearInterval","intervalID","startDate","endDate","getTime","setState","Math","abs","setInterval","size","onClick","pause","start","disabled","lap","reset","Component","createMuiTheme","primary","main","red","hover","secondary","pink","grey","responsiveFontSizes","MuiButton","disableElevation","color","disableRipple","MuiInputLabel","shrink","MuiInput","disableUnderline","MuiTooltip","arrow","overrides","MuiCssBaseline","body","height","MuiContainer","margin","containedPrimary","containedSecondary","fontWeight","textTransform","fontSize","top","spacing","border","outline","tooltip","MuiCard","Home","ThemeProvider","Container","maxWidth","App","Fragment","CssBaseline","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAoCeA,EA3BD,WACZ,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,kBAAkBC,UAAU,2BAE9C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,cAAY,GAAxC,sDAGA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,QAAQC,cAAY,GAAxC,4GAKF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,OACVC,QAAS,kBAACC,EAAA,EAAD,MACTC,KAAK,mDAHP,kB,qHCJOC,G,OAjBK,SAACC,GACnB,IAAMC,EAAiB,CACrBC,UAAU,UAAD,OAAyB,KAAbF,EAAMG,KAAlB,SAELC,EAAiB,CACrBF,UAAU,UAAD,OAAyB,KAAbF,EAAMG,KAAlB,SAGX,OACE,yBAAKE,UAAW,SACd,yBAAKA,UAAW,gBACd,yBAAKA,UAAW,eAAgBC,MAAOF,IACvC,yBAAKC,UAAW,eAAgBC,MAAOL,Q,iBCWhCF,EA1BK,SAACC,GACnB,IAaIG,EAbW,SAACI,GACd,IAAIC,EAAW,GACXC,EAAO,IAAIC,KAAKH,GAQpB,OAPAC,EAAQ,MAAYG,OAAOF,EAAKG,eAAeC,SAAS,EAAG,KAC3DL,EAAQ,QAAcG,OAAOF,EAAKK,iBAAiBD,SAAS,EAAG,KAC/DL,EAAQ,QAAcG,OAAOF,EAAKM,iBAAiBF,SAAS,EAAG,KAC/DL,EAAQ,aAAmBG,OAAOF,EAAKO,sBAAsBH,SAC3D,EACA,KAEKL,EAGEA,CAASR,EAAMG,MAE1B,OAAOQ,OACLR,EAAKc,MACH,IACAd,EAAKe,QACL,IACAf,EAAKgB,QACL,IACAhB,EAAKiB,eCIIC,EArBQ,SAACrB,GACtB,IAUMsB,EAVYC,KAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,WAAWC,WAE5CC,KAAM,GACNC,OAAQ,CACNL,gBAAiBF,EAAMG,QAAQC,WAAWI,SAI9BC,GAEhB,OACE,kBAAChD,EAAA,EAAD,CAAMoB,UAAWiB,EAAQG,MACvB,kBAACnC,EAAA,EAAD,CAAY4C,MAAM,SAAS3C,QAAQ,MACjC,kBAAC,EAAD,CAAaY,KAAMH,EAAMG,U,2BCoClBgC,EAhDFC,IAAMC,MAAK,SAAoBrC,GAC1C,IAWMsB,EAXYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,GACNK,KAAM,CACJQ,MAAO,OACPC,SAAU,OACVC,UAAW,QACXC,QAAS,EACTf,gBAAiBF,EAAMG,QAAQC,WAAWC,cAI9BI,GAEZS,EAAY,WACd,OAAO1C,EAAM2C,UAAUC,OAAS,kBAACT,EAAD,MAAW,kBAACU,EAAD,OAGzCA,EAAS,WACX,OACE,kBAACC,EAAA,EAAD,KACE,kBAACxD,EAAA,EAAD,CAAYC,QAAQ,YAApB,iBAKF4C,EAAO,WACT,IAAIY,EAAMC,mBAEV,OADAC,qBAAU,kBAAMF,EAAIG,QAAQC,eAAe,CAAEC,SAAU,cAChDpD,EAAM2C,UAAUU,KAAI,SAACC,EAAMC,GAAP,OACzB,kBAACT,EAAA,EAAD,KACE,kBAACxD,EAAA,EAAD,CAAYC,QAAQ,WAAWwD,IAAKA,GAApC,OACOQ,EAAQ,EADf,KACmB,kBAAC,EAAD,CAAapD,KAAMmD,UAM5C,OACE,kBAACrE,EAAA,EAAD,CAAMoB,UAAWiB,EAAQG,MACvB,kBAACvC,EAAA,EAAD,CAAYC,MAAM,SAClB,kBAACqE,EAAA,EAAD,CAAMnD,UAAWiB,EAAQQ,MACvB,kBAACY,EAAD,WCtCae,E,4MACnBC,MAAQ,CACNvD,KAAM,EACNwD,KAAM,EACNC,MAAO,EACPC,QAAS,EACTlB,UAAW,I,uDAIX,OACE,kBAACmB,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMR,MAAI,EAACU,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAD,OAEF,kBAACH,EAAA,EAAD,CAAMR,MAAI,EAACU,GAAI,GAAIC,GAAI,GACrB,kBAAChF,EAAA,EAAD,KACE,kBAAC,EAAD,CAAekB,KAAM+D,KAAKR,MAAME,QAChC,kBAAC,EAAD,CAAgBzD,KAAM+D,KAAKR,MAAME,QACjC,kBAACnE,EAAA,EAAD,KACGyE,KAAKC,qBACLD,KAAKE,aACLF,KAAKG,kBAIZ,kBAACP,EAAA,EAAD,CAAMR,MAAI,EAACU,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAD,CAAMtB,UAAWuB,KAAKR,MAAMf,gB,6CAOlC2B,cAAcJ,KAAKK,c,8BAInB,IAAIC,EAAYN,KAAKR,MAAMC,KACvBc,GAAU,IAAI/D,MAAOgE,UAEzBR,KAAKS,SAAS,CACZf,MAAOgB,KAAKC,IAAIL,EAAYC,O,8BAIvB,IAAD,OACNP,KAAKS,SAAS,CACZd,QAAS,EACTF,KAAMiB,KAAKC,KAAI,IAAInE,MAAOgE,UAAYR,KAAKR,MAAME,SAEnDM,KAAKK,WAAaO,aAAY,kBAAM,EAAKlB,UAAS,M,8BAIlDM,KAAKS,SAAS,CACZhB,MAAM,IAAIjD,MAAOgE,UACjBb,QAAS,IAEXS,cAAcJ,KAAKK,c,8BAInBL,KAAKS,SAAS,CACZf,MAAO,EACPjB,UAAW,O,4BAKTuB,KAAKR,MAAME,MAAQ,GACrBM,KAAKS,SAAS,CACZhC,UAAU,GAAD,mBAAMuB,KAAKR,MAAMf,WAAjB,CAA4BuB,KAAKR,MAAME,QAChDD,MAAM,IAAIjD,MAAOgE,UACjBd,MAAO,M,2CAKS,IAAD,OACnB,OACE,kBAAClE,EAAA,EAAD,CACEC,UAAU,OACVoF,KAAK,QACLC,QAAS,WACP,EAAKtB,MAAMG,QAAU,EAAI,EAAKoB,QAAU,EAAKC,SAE/CtF,QAASsE,KAAKR,MAAMG,QAAU,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAEjDK,KAAKR,MAAMG,QAAU,EAAI,QAAU,W,mCAK5B,IAAD,OACX,OACE,kBAACnE,EAAA,EAAD,CACEqF,KAAK,QACLpF,UAAU,OACVJ,QAAQ,WACR4F,WAAUjB,KAAKR,MAAME,MAAQ,GAC7BhE,QAAS,kBAAC,IAAD,MACToF,QAAS,WACP,EAAKI,QAPT,S,qCAeY,IAAD,OACb,OACE,kBAAC1F,EAAA,EAAD,CACEqF,KAAK,QACLpF,UAAU,OACVJ,QAAQ,WACR4F,SACyB,IAAvBjB,KAAKR,MAAMG,SAAsC,IAArBK,KAAKR,MAAME,MAEzChE,QAAS,kBAAC,IAAD,MACToF,QAAS,WACP,EAAKK,UATT,a,GAjHiCC,a,yCCXnC9D,EAAQ+D,YAAe,CACzB5D,QAAS,CACP6D,QAAS,CACPC,KAAMC,IAAI,KACVC,MAAOD,IAAI,MAEbE,UAAW,CACTH,KAAMI,IAAK,MAEbjE,WAAY,CACVkE,KAAM,UACNjE,UAAW,eAKjBL,EAAQuE,YAAoBvE,IAEtBxB,MAAQ,CACZgG,UAAW,CACTC,kBAAkB,EAClB1G,QAAS,YACT2G,MAAO,UACPC,cAAe,QAEjBC,cAAe,CACbC,QAAQ,GAEVC,SAAU,CACRC,kBAAkB,GAEpBC,WAAY,CACVC,OAAO,IAIXjF,EAAMkF,UAAY,CAChBC,eAAgB,CACdlF,KAAM,CACJmF,KAAM,CACJlF,gBAAiBF,EAAMG,QAAQC,WAAWI,KAC1C6E,OAAQ,UAIdC,aAAc,CACZrF,KAAM,CACJsF,OAAQ,WAGZf,UAAW,CACTvE,KAAM,CACJyE,MAAO,SAGTc,iBAAkB,CAChB,UAAW,CACTtF,gBAAiBF,EAAMG,QAAQ6D,QAAQG,QAG3CsB,mBAAoB,CAClBC,WAAY,MAGhBd,cAAe,CACb3E,KAAM,CACJ0F,cAAe,YACfC,SAAU,WAGdd,SAAU,CACR7E,KAAM,CACJ4F,IAAK7F,EAAM8F,QAAQ,GACnBC,OAAO,aAAD,OAAezB,IAAK,MAC1B0B,QAAQ,wBACR/E,QAASjB,EAAM8F,QAAQ,GACvB,YAAa,CACXC,OAAO,aAAD,OAAe/F,EAAMG,QAAQ6D,QAAQC,MAC3C+B,QAAQ,aAAD,OAAehG,EAAMG,QAAQ6D,QAAQC,SAIlDe,WAAY,CACViB,QAAS,CACP/F,gBAAiB,OACjB6F,OAAO,aAAD,OAAe/F,EAAMG,QAAQ6D,QAAQC,MAC3CS,MAAO1E,EAAMG,QAAQ6D,QAAQC,MAE/BgB,MAAO,CACLP,MAAO1E,EAAMG,QAAQ6D,QAAQC,OAGjCiC,QAAS,CACPjG,KAAM,CACJsF,OAAQ,UAKCvF,QCpFAmG,EAVF,WACX,OACE,kBAACC,EAAA,EAAD,CAAepG,MAAOA,GACpB,kBAACqG,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAAC,EAAD,SCIOC,MAXf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,OCErBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUC,oBAChB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.39184051.chunk.js","sourcesContent":["import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport { GitHub } from '@material-ui/icons'\n\nconst About = () => {\n  return (\n    <Card>\n      <CardHeader title=\"React Stopwatch\" subheader=\"by Alex McGovern Smith\" />\n\n      <CardContent>\n        <Typography variant=\"body1\" gutterBottom>\n          A simple stopwatch built with React & Material UI.\n        </Typography>\n        <Typography variant=\"body2\" gutterBottom>\n          You can't lap unless the timer is greater than 0, and you can only\n          reset when the timer is not running.\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          fullWidth=\"true\"\n          endIcon={<GitHub />}\n          href=\"https://github.com/lxdesign-ie/react-stopwatch/\"\n        >\n          Source Code\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nexport default About\n","import React from 'react'\nimport './styles.scss'\n\nconst TimeDisplay = (props) => {\n  const rotate_seconds = {\n    transform: `rotate(${props.time * 0.006}deg)`,\n  }\n  const rotate_minutes = {\n    transform: `rotate(${props.time * 0.0001}deg)`,\n  }\n\n  return (\n    <div className={'clock'}>\n      <div className={'analog-clock'}>\n        <div className={'dial minutes'} style={rotate_minutes} />\n        <div className={'dial seconds'} style={rotate_seconds} />\n      </div>\n    </div>\n  )\n}\nexport default TimeDisplay\n","const TimeDisplay = (props) => {\n  let duration = (in_milliseconds) => {\n    let duration = {}\n    let date = new Date(in_milliseconds)\n    duration['hours'] = String(date.getUTCHours()).padStart(2, '0')\n    duration['minutes'] = String(date.getUTCMinutes()).padStart(2, '0')\n    duration['seconds'] = String(date.getUTCSeconds()).padStart(2, '0')\n    duration['milliseconds'] = String(date.getUTCMilliseconds()).padStart(\n      3,\n      '0',\n    )\n    return duration\n  }\n\n  let time = duration(props.time)\n\n  return String(\n    time.hours +\n      ':' +\n      time.minutes +\n      ':' +\n      time.seconds +\n      '.' +\n      time.milliseconds,\n  )\n}\nexport default TimeDisplay\n","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Typography from '@material-ui/core/Typography'\nimport TimeDisplay from '../time_display/time_display'\n\nconst DigitalDisplay = (props) => {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      backgroundColor: theme.palette.background.lightGrey,\n    },\n    list: {},\n    header: {\n      backgroundColor: theme.palette.background.Grey,\n    },\n  }))\n\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <Typography align=\"center\" variant=\"h3\">\n        <TimeDisplay time={props.time} />\n      </Typography>\n    </Card>\n  )\n}\nexport default DigitalDisplay\n","import React, { useEffect, useRef } from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport TimeDisplay from '../time_display/time_display'\n\n//use memo to only re-render on prop change\nconst Laps = React.memo(function UpdateLaps(props) {\n  const useStyles = makeStyles((theme) => ({\n    root: {},\n    list: {\n      width: '100%',\n      overflow: 'auto',\n      maxHeight: '280px',\n      padding: 0,\n      backgroundColor: theme.palette.background.lightGrey,\n    },\n  }))\n\n  const classes = useStyles()\n\n  let LapsExist = () => {\n    return props.lap_times.length ? <Laps /> : <NoLaps />\n  }\n\n  let NoLaps = () => {\n    return (\n      <ListItem>\n        <Typography variant=\"overline\">No laps yet</Typography>\n      </ListItem>\n    )\n  }\n\n  let Laps = () => {\n    let ref = useRef()\n    useEffect(() => ref.current.scrollIntoView({ behavior: 'smooth' }))\n    return props.lap_times.map((item, index) => (\n      <ListItem>\n        <Typography variant=\"overline\" ref={ref}>\n          Lap {index + 1}: <TimeDisplay time={item} />\n        </Typography>\n      </ListItem>\n    ))\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader title=\"Laps\" />\n      <List className={classes.list}>\n        <LapsExist />\n      </List>\n    </Card>\n  )\n})\n\nexport default Laps\n","import React, { Component } from 'react'\nimport { Grid } from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CachedIcon from '@material-ui/icons/Cached'\nimport ClearIcon from '@material-ui/icons/Clear'\nimport PauseIcon from '@material-ui/icons/Pause'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport AnalogDisplay from '../analog_display/analog_display'\nimport DigitalDisplay from '../digital_display/digital_display'\nimport Laps from '../laps/laps'\nimport About from '../about/about'\n\nexport default class Stopwatch extends Component {\n  state = {\n    time: 0,\n    init: 0,\n    timer: 0,\n    running: 0,\n    lap_times: [],\n  }\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item sm={12} md={2}>\n          <About />\n        </Grid>\n        <Grid item sm={12} md={8}>\n          <Card>\n            <AnalogDisplay time={this.state.timer} />\n            <DigitalDisplay time={this.state.timer} />\n            <CardActions>\n              {this.start_pause_button()}\n              {this.lap_button()}\n              {this.reset_button()}\n            </CardActions>\n          </Card>\n        </Grid>\n        <Grid item sm={12} md={2}>\n          <Laps lap_times={this.state.lap_times} />\n        </Grid>\n      </Grid>\n    )\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID)\n  }\n\n  timer() {\n    let startDate = this.state.init\n    let endDate = new Date().getTime()\n\n    this.setState({\n      timer: Math.abs(startDate - endDate),\n    })\n  }\n\n  start() {\n    this.setState({\n      running: 1,\n      init: Math.abs(new Date().getTime() - this.state.timer),\n    })\n    this.intervalID = setInterval(() => this.timer(), 10)\n  }\n\n  pause() {\n    this.setState({\n      init: new Date().getTime(),\n      running: 0,\n    })\n    clearInterval(this.intervalID)\n  }\n\n  reset() {\n    this.setState({\n      timer: 0,\n      lap_times: [],\n    })\n  }\n\n  lap() {\n    if (this.state.timer > 0) {\n      this.setState({\n        lap_times: [...this.state.lap_times, this.state.timer],\n        init: new Date().getTime(),\n        timer: 0,\n      })\n    }\n  }\n\n  start_pause_button() {\n    return (\n      <Button\n        fullWidth=\"true\"\n        size=\"large\"\n        onClick={() => {\n          this.state.running > 0 ? this.pause() : this.start()\n        }}\n        endIcon={this.state.running > 0 ? <PauseIcon /> : <PlayArrowIcon />}\n      >\n        {this.state.running > 0 ? 'Pause' : 'Start'}\n      </Button>\n    )\n  }\n\n  lap_button() {\n    return (\n      <Button\n        size=\"large\"\n        fullWidth=\"true\"\n        variant=\"outlined\"\n        disabled={this.state.timer > 0 ? false : true} //ternary condition to disable lap when timer is at 0\n        endIcon={<CachedIcon />}\n        onClick={() => {\n          this.lap()\n        }}\n      >\n        Lap\n      </Button>\n    )\n  }\n\n  reset_button() {\n    return (\n      <Button\n        size=\"large\"\n        fullWidth=\"true\"\n        variant=\"outlined\"\n        disabled={\n          this.state.running === 1 || this.state.timer === 0 ? true : false //ternary xor condition to disable reset if its running, or it's already reset\n        }\n        endIcon={<ClearIcon />}\n        onClick={() => {\n          this.reset()\n        }}\n      >\n        Reset\n      </Button>\n    )\n  }\n}\n","import { grey, pink, red } from '@material-ui/core/colors'\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles'\n\nlet theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: red[500],\n      hover: red[300],\n    },\n    secondary: {\n      main: pink[500],\n    },\n    background: {\n      grey: '#f4f7f9',\n      lightGrey: '#f9fbfc',\n    },\n  },\n})\n\ntheme = responsiveFontSizes(theme)\n\ntheme.props = {\n  MuiButton: {\n    disableElevation: false,\n    variant: 'contained',\n    color: 'primary',\n    disableRipple: 'true',\n  },\n  MuiInputLabel: {\n    shrink: true,\n  },\n  MuiInput: {\n    disableUnderline: true,\n  },\n  MuiTooltip: {\n    arrow: true,\n  },\n}\n\ntheme.overrides = {\n  MuiCssBaseline: {\n    root: {\n      body: {\n        backgroundColor: theme.palette.background.Grey,\n        height: '100%',\n      },\n    },\n  },\n  MuiContainer: {\n    root: {\n      margin: '60px 0',\n    },\n  },\n  MuiButton: {\n    root: {\n      color: 'white',\n    },\n\n    containedPrimary: {\n      '&:hover': {\n        backgroundColor: theme.palette.primary.hover,\n      },\n    },\n    containedSecondary: {\n      fontWeight: 700,\n    },\n  },\n  MuiInputLabel: {\n    root: {\n      textTransform: 'uppercase',\n      fontSize: '1.5rem',\n    },\n  },\n  MuiInput: {\n    root: {\n      top: theme.spacing(2),\n      border: `1px solid ${grey[500]}`,\n      outline: `1px solid transparent`,\n      padding: theme.spacing(1),\n      '&$focused': {\n        border: `1px solid ${theme.palette.primary.main}`,\n        outline: `1px solid ${theme.palette.primary.main}`,\n      },\n    },\n  },\n  MuiTooltip: {\n    tooltip: {\n      backgroundColor: '#fff',\n      border: `2px solid ${theme.palette.primary.main}`,\n      color: theme.palette.primary.main,\n    },\n    arrow: {\n      color: theme.palette.primary.main,\n    },\n  },\n  MuiCard: {\n    root: {\n      margin: '15px',\n    },\n  },\n}\n\nexport default theme\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport About from './about/about'\nimport Stopwatch from './stopwatch/stopwatch'\nimport theme from '../theme'\n\nconst Home = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"lg\">\n        <Stopwatch />\n      </Container>\n    </ThemeProvider>\n  )\n}\n\nexport default Home\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport Home from './components'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}